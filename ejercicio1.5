package main

import (
	"fmt"
	"sort"
)

type producto struct {
	nombre   string
	cantidad int
	precio   int
}
type listaProductos []producto

var lProductos listaProductos

const existenciaMinima int = 10 //la existencia mínima es el número mínimo debajo de el cual se deben tomar eventuales desiciones

func (l *listaProductos) agregarProducto(nombre string, cantidad int, precio int) {
	l.buscarProducto(nombre)
	if -1 == l.buscarProducto(nombre) {
		*l = append(*l, producto{nombre: nombre, cantidad: cantidad, precio: precio})
	} else if -1 != l.buscarProducto(nombre) {
		fmt.Println("El producto ya existe, se le añade la nueva cantidad y precio")
		(*l)[l.buscarProducto(nombre)].cantidad = cantidad
		(*l)[l.buscarProducto(nombre)].precio = precio
	}
	// modificar el código para que cuando se agregue un producto, si este ya se encuentra, incrementar la cantidad
	// de elementos del producto y eventualmente el precio si es que es diferente
}

func (l *listaProductos) buscarProducto(nombre string) int { //el retorno es el índice del producto encontrado y -1 si no existe
	var result = -1
	var i int
	for i = 0; i < len(*l); i++ {
		if (*l)[i].nombre == nombre {
			result = i
		}
	}
	return result
}

func (l *listaProductos) venderProducto(nombre string, cantidad int) {
	var prod = l.buscarProducto(nombre)
	if prod != -1 {
		(*l)[prod].cantidad = (*l)[prod].cantidad - cantidad
		//modificar para que cuando no haya existencia de cantidad de productos, el producto se elimine de "la lista" y notificar
	}
	if (*l)[prod].cantidad <= 0 {
		*l = append((*l)[:prod], (*l)[prod+1:]...)
	}
}

func (l *listaProductos) productosExistenciaMinima() []producto {
	var productosMinimos []producto
	for _, p := range *l {
		if p.cantidad <= existenciaMinima {
			productosMinimos = append(productosMinimos, p)
		}
	}
	return productosMinimos
}

func (l *listaProductos) ampliarExistencias() listaProductos {
	productosMinimos := l.productosExistenciaMinima()
	for _, p := range productosMinimos {
		comprar := existenciaMinima - p.cantidad
		comprardos := comprar + p.cantidad
		if comprar > 0 {
			fmt.Printf("Comprando %d unidades de %s\n", comprar, p.nombre)
			l.agregarProducto(p.nombre, comprardos, p.precio)
		}
	}
	return *l
}

func (l *listaProductos) ordenarProductosPorPrecio() {
	sort.Slice(*l, func(i, j int) bool {
		return (*l)[i].precio > (*l)[j].precio
	})
}

func llenarDatos() {
	lProductos.agregarProducto("arroz", 15, 2500)
	lProductos.agregarProducto("frijoles", 4, 2000)
	lProductos.agregarProducto("leche", 8, 1200)
	lProductos.agregarProducto("café", 12, 4500)
}

func main() {
	llenarDatos()
	fmt.Println(lProductos)
	fmt.Println("Agregando producto........")
	lProductos.agregarProducto("arroz", 16, 23000)
	fmt.Println(lProductos)
	fmt.Println("Vendiendo producto.......")
	lProductos.venderProducto("arroz", 16)
	fmt.Println(lProductos)
	fmt.Println("------Productos con existencia mínima------")
	fmt.Println(lProductos.productosExistenciaMinima())
	fmt.Println("Ampliando existencias......")
	fmt.Println(lProductos.ampliarExistencias())

}
