



// Ejercicios de rutas en Grafos con búsqueda en profundidad

//        a ---- c ---- x
//      /   \  /
//     /     \/
//   i       /\
//     \    /  \
//      \  /    \
//        b ---- d ---- f
let grafo = [
    [('i', 0);('a', 1);('b', 2)];
    [('a', 1);('i', 0);('c', 3);('d', 2)];
    [('b', 2);('i', 0);('c', 1);('d', 4)];
    [('c', 3);('a', 1);('b', 1);('x', 2)];
    [('d', 2);('a', 4);('b', 1);('f', 3)];
    [('f', 3);('d', 2)];
    [('x', 2);('c', 3)]
]

let miembro e (lista: ('a * 'b) list) =
    lista
    |> List.map (fun (x,_) -> x = e)
    |> List.reduce (fun x y -> x || y)

let rec vecinos nodo grafo =
    match grafo with
    | [] -> []
    | ((head, peso)::adyacencias)::tail when nodo = head -> adyacencias
    | _::tail -> vecinos nodo tail 
(*let rec vecinos nodo grafo =
    match grafo with
    | [] -> []
    | ((head::_)::(tail::_))::_ when nodo = head -> tail
    | _::tail -> vecinos nodo tail*) 

let extender (ruta: _ list) grafo =
    (vecinos (fst ruta.Head) grafo)
    |> List.map (fun (x,peso) -> if (miembro x ruta) then [] else (x,peso)::ruta )
    |> List.filter (fun x -> x <> [])

let rec prof_aux fin (rutas: _ list list) grafo =
    if rutas = [] then
        []
    elif fin = (fst rutas.Head.Head) then
        //List.rev rutas.Head
        List.append
            ([List.rev rutas.Head])
            (prof_aux fin rutas.Tail grafo)
    else
        prof_aux fin (List.append (extender rutas.Head grafo) rutas.Tail) grafo
        
let prof ini fin grafo =
    prof_aux fin [[(ini,0)]] grafo
    

//EJERCICIO calcular la ruta más corta, se llama a profundidad y se hace el cálculo, puede ser un map y luego un reduce
let ruta_mas_corta ini fin grafo =
    let rec prof_aux fin (rutas: _ list list) grafo =
        if rutas = [] then
            None
        elif fin = (fst rutas.Head.Head) then
            Some(List.rev rutas.Head)
        else
            prof_aux fin (List.append (extender rutas.Head grafo) rutas.Tail) grafo
    match prof_aux fin [[(ini,0)]] grafo with
    | None -> None
    | Some(ruta) ->
        let longitud = ruta |> List.map snd |> List.sum
        Some(ruta, longitud)

let resultado = ruta_mas_corta 'i' 'f' grafo
match resultado with
| None -> printf "No se encontró una ruta entre los nodos especificados"
| Some(ruta, longitud) -> printf "La ruta más corta es %A y tiene una longitud de %d" ruta longitud



//printf "%A" (prof 'i' 'f' grafo)
